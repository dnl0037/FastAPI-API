name: Build and Deploy code
on: [ push,pull_request ]
jobs:
  build:
    environment:
      name: testing
    env:
      DB_USERNAME: ${{secrets.DB_USERNAME}}
      DB_HOSTNAME: ${{secrets.DB_HOSTNAME}}
      DB_PORT: ${{secrets.DB_PORT}}
      DB_PASSWORD: ${{secrets.DB_PASSWORD}}
      DB_NAME: ${{secrets.DB_NAME}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      TOKEN_EXPIRATION_TIME: ${{secrets.TOKEN_EXPIRATION_TIME}}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DB_PASSWORD}}
          POSTGRES_DB: ${{secrets.DB_NAME}}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
      - name: Install python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: upgrade pip
        run: python -m pip install --upgrade pip
      - name: install dependencies
        run: pip install -r requirements.txt
      - name: test with pytest
        run: |
          pip install pytest
          pytest
      #      - name: Login to Docker Hub
      #        uses: docker/login-action@v3
      #        with:
      #          username: ${{ secrets.DOCKER_HUB_USERNAME }}
      #          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
      #      - name: Set up Docker Buildx
      #        id: buildx
      #        uses: docker/setup-buildx-action@v3
      #      - name: Build and push
      #        id: docker_build
      #        uses: docker/build-push-action@v2
      #        with:
      #          context: ./
      #          file: ./Dockerfile
      #          builder: ${{ steps.buildx.outputs.name }}
      #          push: true
      #          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/fastapiapi:githubactions
      #          cache-from: type=local,src=/tmp/.buildx-cache
      #          cache-to: type=local,dest=/tmp/.buildx-cache
      #      - name: Image digest
      #        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    runs-on: ubuntu-latest
    needs: [ build ]
    environment:
      name: production
    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
      - name: deploying to heroku
        uses: akhileshns/heroku-deploy@v3.12.14 # This is the action
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_EMAIL}}
      - name: deploying to ubuntu server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DIGITAL_OCEAN_HOST_1 }}
          username: ${{ secrets.DIGITAL_OCEAN_1_USERNAME }}
          password: ${{ secrets.DIGITAL_OCEAN_1_PASSWORD }}
          script: |
            cd app/src
            git pull
            echo ${{ secrets.DIGITAL_OCEAN_1_PASSWORD }} | sudo -S systemctl restart fastapiapi
